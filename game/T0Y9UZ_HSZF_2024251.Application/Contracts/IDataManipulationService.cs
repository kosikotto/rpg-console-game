using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using T0Y9UZ_HSZF_2024251.Model.Entities;
using T0Y9UZ_HSZF_2024251.Model.Types;
using T0Y9UZ_HSZF_2024251.Persistence.MsSql.Dataproviders;

namespace T0Y9UZ_HSZF_2024251.Application.contracts
{
    public interface IDataManipulationService
    {
        void CreatingNewGame(string file);
        void Load(Data data);
        List<Hero> GetEveryHeroData();
        string CheckNewGameAbilityIndex(List<Hero> tmp);
        void CheckNewGameAbilityIndexIncrease();
        void CheckNewGameAbilityIndexReset();
        void TeamBuildUpRemoveHero(ICollection<Hero> heroes, Hero hero);
        void TeamBuildUpAddHero(ICollection<Hero> heroes, Hero hero);
        void TeamBuildCompleted(List<Hero> tmp, ICollection<Hero> heroes);
        string[] ReadFilesData();
        string GetFilesName(string file);
        void SaveGame(int idx);
        void OverrideSave(string path, string fileName);
        string ExitGame();
        string HeroOnAdventure(Hero hero);
        string HeroFinishedAdventure(Hero hero);
        string HeroTaskWasTaken(Hero hero);
        void HeroCompletedTask(Hero hero);
        void HeroPassedAwayDuringAdventure(Hero hero);
        string GetBasicHeroInfos();
        List<string> FormatHerosOnMission();
        string SendToRecovery(Hero hero);
        GameTask GetTaskFromHero(Hero hero);
        void AbortMission(Hero hero, GameTask task);
        void Eat(Hero hero);
        void Drink(Hero hero);
        void Recovery(Hero hero);
        void ResetHeroDaysLeft(Hero hero);
        void FoodPutGetIntoFromMainStorage(Hero hero, Resources storage, string pluszOrMinusz);
        void WaterPutGetIntoFromMainStorage(Hero hero, Resources storage, string pluszOrMinusz);
        void AlchemyIngredientPutGetIntoFromMainStorage(Hero hero, Resources storage, string pluszOrMinusz);
        void WeaponPutGetIntoFromMainStorage(Hero hero, Resources storage, string pluszOrMinusz);
        List<GameTask> GetEveryTaskData();
        List<int> GenerateRandomTasks();
        string CheckIfHeroFits(Hero hero, GameTask task);
        bool CheckIfHeroFitsForTask(HeroStatus status, string ifFits);
        string SuccessToSendToMission(Hero hero, GameTask task);
        void SentToMission(Hero hero, GameTask task);
        List<int> GenerateRandomMonsters();
        List<Monster> GetEveryMonstersData();
        string CheckIfHeroFitsForCombat(Hero hero, Monster monster);
        void SetSpecificHeroAbility(Hero hero, Monster monster);
        void SetHeroAbilitySuitable(bool ability);
        bool GetHeroAbilitySuitable();
        int GetAbilityCooldown();
        void SetCooldown();
        void DecreaseCooldown();
        int GenerateMonsterHealth(Monster monster);
        int GetMonsterHealth();
        string EatCombat(Hero hero);
        void HeroAteDuringCombat(Hero hero);
        string DrinkCombat(Hero hero);
        void HeroDrankDuringCombat(Hero hero);
        void HeroDamageToMonster(Hero hero, Monster monster);
        string CheckAbility();
        string UseAbility(Hero hero, Monster monster);
        string Attack(Hero hero, Monster monster);
        bool IsBattleFinished(Hero hero, Monster monster);
        void UpdateHeroStatus(Hero hero, Monster monster);
        void HandleBattleOutcome(Hero hero, Monster monster);
        Resources GetMainStorage();
        List<Resources> GetEveryResourcesData();
        void SetIsGameRunning(bool gameStatus);
        bool CheckIfGameIsRunning();
        void NextDay();
        void UpdateHeroesDaily(List<Hero> heroes, int currentDay);
        void HandleAutoCare(ICollection<Hero> heroes);
        void HandleRecovery(ICollection<Hero> heroes);
        void MarkHeroAsDeceased(Hero hero);
        bool DaysLimitReached();
        bool CheckIfEveryHeroPassedAway();
        void CheckIfGameFinished();
        int GetDaysLimit();
        int GetCurrentDay();
    }
}